{"version":3,"sources":["components/Search.js","components/Result.js","components/Results.js","App.js","serviceWorker.js","index.js"],"names":["Search","handleInput","search","className","type","placeholder","onChange","onKeyPress","Result","result","src","Poster","Title","Results","results","map","App","useState","s","selected","state","setState","e","target","value","prevState","key","axios","apiurl","then","data","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"8PAgBeA,MAdf,YAA0C,IAAxBC,EAAuB,EAAvBA,YAAaC,EAAU,EAAVA,OAC3B,OACI,6BAASC,UAAU,iBACf,2BACIC,KAAK,OACLC,YAAY,wBACZF,UAAU,YACVG,SAAUL,EACVM,WAAYL,MCCbM,MATf,YAA6B,IAAXC,EAAU,EAAVA,OACd,OACI,yBAAKN,UAAU,UACX,yBAAKO,IAAKD,EAAOE,SACjB,4BAAKF,EAAOG,SCOTC,MAVf,YAA+B,IAAZC,EAAW,EAAXA,QACf,OACI,6BAASX,UAAU,WACdW,EAAQC,KAAI,SAAAN,GAAM,OACf,kBAAC,EAAD,CAAQA,OAAQA,SC2CjBO,MA5Cf,WAAgB,IAAD,EAEaC,mBAAS,CACjCC,EAAG,GACHJ,QAAS,GACTK,SAAU,KALC,mBAENC,EAFM,KAECC,EAFD,KA+Bb,OACE,6BACE,gCACE,+CAEF,8BACE,kBAAC,EAAD,CAAQpB,YAfM,SAACqB,GACnB,IAAIJ,EAAII,EAAEC,OAAOC,MAEjBH,GAAS,SAAAI,GACP,OAAO,eAAKA,EAAZ,CAAuBP,EAAGA,QAWUhB,OA3BzB,SAACoB,GACD,UAAVA,EAAEI,KACHC,IAAMC,yDAAiBR,EAAMF,GAAGW,MAAK,YAAa,IAC5Cf,EAD2C,EAAVgB,KAClB9B,OAEnBqB,GAAS,SAAAI,GACP,OAAO,eAAKA,EAAZ,CAAuBX,QAASA,aAsBlC,kBAAC,EAAD,CAASA,QAASM,EAAMN,aChCZiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBd,MAAK,SAAAe,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.72e85e5d.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Search({ handleInput, search }) {\n    return (\n        <section className='seachbox-wrap'>\n            <input \n                type='text' \n                placeholder='Search for a movie...' \n                className='searchbox' \n                onChange={handleInput}  \n                onKeyPress={search}\n            />\n        </section>\n    );\n}\n\nexport default Search;","import React from 'react';\n\nfunction Result({ result }) {\n    return (\n        <div className='result'>\n            <img src={result.Poster} />\n            <h3>{result.Title}</h3>\n        </div>\n    );\n}\n\nexport default Result;","import React from 'react';\nimport Result from './Result';\n\nfunction Results({ results }) {\n    return (\n        <section className='results'>\n            {results.map(result => (\n                <Result result={result} />\n            ))}\n        </section>\n    );\n}\n\nexport default Results;","import React, {useState} from 'react';\nimport axios from 'axios'\n\nimport Search from './components/Search'\nimport Results from './components/Results'\n\nfunction App() {\n\n  const [state, setState] = useState({\n    s: '',\n    results: [],\n    selected: {}\n  });\n\n  const apiurl =\"http://www.omdbapi.com/?i=tt3896198&apikey=5b280ac0\"\n\n  const search = (e) => {\n    if(e.key === 'Enter') {\n      axios(apiurl + \"&s=\" + state.s).then(({data}) => {\n        let results = data.Search;\n\n        setState(prevState => {\n          return { ...prevState, results: results}\n        })\n      });\n    }\n  }\n\n  const handleInput = (e) => {\n    let s = e.target.value;\n\n    setState(prevState => {\n      return { ...prevState, s: s }\n    });\n\n  }\n\n  return (\n    <div>\n      <header>\n        <h1>Movie Database</h1>\n      </header>\n      <main>\n        <Search handleInput={handleInput} search={search}/>\n        <Results results={state.results} />\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}